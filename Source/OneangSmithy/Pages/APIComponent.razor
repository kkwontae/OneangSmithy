@page "/lck"
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@inject IHttpClientFactory ClientFactory

<h1>LCK Summer Schedule !</h1>

@if (getBranchesError)
{
    <p>Unable to get branches from GitHub. Please try again later.</p>
}
else
{
    if (JObjSchedules is null)
    {
        <p>loading...</p>
    }
    else
    {

        var events =
            from _event in JObjSchedules["data"]["schedule"]["events"]
            where (DateTime)_event["startTime"] >= new DateTime(2022, 6, 15) // 개막일
    select new
            {
                LeagueName = (string)_event["league"]["name"],
                StartTime = (DateTime)_event["startTime"],
                HomeTeamName = (string)_event["match"]["teams"][0]["name"],
                HomeTeamCode = (string)_event["match"]["teams"][0]["code"],
                HomeTeamImage = (string)_event["match"]["teams"][0]["image"],
                AwayTeamName = (string)_event["match"]["teams"][1]["name"],
                AwayTeamCode = (string)_event["match"]["teams"][1]["code"],
                AwayTeamImage = (string)_event["match"]["teams"][1]["image"],
            };

    <table border="1" cellpadding="5" style="background-color:lightgrey">
        <tr align="center">
            <td>No.</td>
            <td>League</td>
            <td>Date</td>
            <td colspan="3">Match</td>
        </tr>
        @{ int index = 1;}
        @{ string fontColor; }
        @foreach (var _event in events)
        {
            fontColor = _event.StartTime.AddHours(9) < DateTime.Now ? "gray"
                            : _event.StartTime.AddHours(9).Date == DateTime.Now.Date && _event.StartTime.AddHours(9).Month == DateTime.Now.Month ? "blue"
                            : "black";
            <tr align="center">
                <td>@index</td>
                <td>@_event.LeagueName</td>
                <td><font color=@fontColor>@_event.StartTime.AddHours(9).ToString("yyyy/MM/dd(ddd) tt h시")</font></td>
                <td align="right">@_event.HomeTeamCode <img src="@_event.HomeTeamImage" width="25" height="25" /></td>
                <td align="center">vs</td>
                <td align="left"><img src="@_event.AwayTeamImage" width="25" height="25" /> @_event.AwayTeamCode</td>
            </tr>
            index += 1;
        }
        </table>
                }
            }

@code {
    private JObject JObjSchedules;

    private bool getSchedulesError;
    private bool getBranchesError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    private static string API_URL_PERSISTED = "https://esports-api.lolesports.com/persisted/gw";
    private static string API_URL_LIVE = "https://feed.lolesports.com/livestats/v1";
    private static string API_KEY = "0TvQnueqKa5mxJntVWt0w4LpLfEkrV1Ta8rQBb9Z";
    private static string hl = "ko-KR";
    private static string leagueId = "98767991310872058";

    public async Task GetLeagues()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
        $"{API_URL_PERSISTED}/getLeagues?hl={hl}");
        request.Headers.Add("x-api-key", API_KEY);

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            string responseString = await response.Content.ReadAsStringAsync();
        }
        else
        {
            getBranchesError = true;
        }
    }

    public async Task<string> GetSchedules(string _hl, string _leagueId, string _pageToken = null)
    {
        string responseString = "{}";
        var request = new HttpRequestMessage(HttpMethod.Get,
    $"{API_URL_PERSISTED}/getSchedule?hl={_hl}&leagueId={_leagueId}&pageToken={_pageToken}");
        request.Headers.Add("x-api-key", API_KEY);

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            responseString = await response.Content.ReadAsStringAsync();
        }
        else
        {
            getSchedulesError = true;
        }
        return responseString;
    }

    protected override async Task OnInitializedAsync()
    {
        string JsonSchedules = await GetSchedules(hl, leagueId);
        JObjSchedules = JObject.Parse(JsonSchedules);

        string newer = JObjSchedules["data"]["schedule"]["pages"]["newer"].Value<string>();
        while (!string.IsNullOrEmpty(newer))
        {
            string jsonSchedulesNextPage = await GetSchedules(hl, leagueId, newer);
            JObject JObjSchedulesNextPage = JObject.Parse(jsonSchedulesNextPage);
            newer = JObjSchedulesNextPage["data"]["schedule"]["pages"]["newer"].Value<string>();
            JObjSchedules.Merge(JObjSchedulesNextPage, new JsonMergeSettings
            {
                // union array values together to avoid duplicates
                MergeArrayHandling = MergeArrayHandling.Union
            });

        }
        shouldRender = true;
    }
}
